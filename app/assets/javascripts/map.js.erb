var geocoder;
var map;
var pinLayer;
var infoboxLayer;
var pushpinFrameHTML;
var currentPinInfobox;

function initialize()
{
    map = new Microsoft.Maps.Map(document.getElementById("mapDiv"), {
		credentials:"AkL7bdBJmEpRncJpZ9MmXwEUIvnkId7Yo9IJrDhNFGrkR--08hfritan5JH_nzRw",
		center: new Microsoft.Maps.Location(37.7577,-122.4376),
		mapTypeId: Microsoft.Maps.MapTypeId.road,
		zoom: 6});
	
	geocoder = new google.maps.Geocoder();
		
	//Create two layers, one for pushpins, the other for the infobox. This way the infobox will always be above the pushpins.
	infoboxLayer = new Microsoft.Maps.EntityCollection();
	map.entities.push(infoboxLayer);
	
	pinLayer = new Microsoft.Maps.EntityCollection();
	map.entities.push(pinLayer);
	
	pushpinFrameHTML = '<div class="infobox"><div class="infobox_content">{content}</div></div><div class="infobox_pointer"><img src= <%= asset_path("pointer_shadow.png") %> /></div>';
}

function addMarkersOnMapForLocations(locations) {
	console.log('adding markers...');

	for(address in locations){
		if(locations.hasOwnProperty(address)){
			locationInfo = locations[address];
 			userInfoList = locationInfo.userInfoList;
			addMarkersOnMap(locationInfo.loc, userInfoList);
		}
	}
}

function addMarkersOnMap(location, userInfoList) {
	if(typeof location === 'undefined')
		return;

	var loc = new Microsoft.Maps.Location(location.latitude, location.longitude);
	var pin = new Microsoft.Maps.Pushpin(loc);
	pin.title = location.address;
	pin.description = userInfoList;
	pinLayer.push(pin);
	
	// Create the infobox for the pushpin
    var pinInfobox = new Microsoft.Maps.Infobox(pin.getLocation(), {visible:false});
	infoboxLayer.push(pinInfobox);
	currentPinInfobox = pinInfobox;

	 // Add handler for the pushpin click event.
    Microsoft.Maps.Events.addHandler(pin, 'click', displayInfobox.bind(pinInfobox));

	// Center map when marker is clicked
    Microsoft.Maps.Events.addHandler(pin, 'click', function centerMap(e) {
		map.setView({center: new Microsoft.Maps.Location(location.latitude, location.longitude)});
	});
		
     // Hide the infobox when the map is moved.
     // Microsoft.Maps.Events.addHandler(map, 'viewchangestart', function displayInfobox(e)
     //      {
     //     	this.setOptions({ visible:false });
     // 	 }.bind(pinInfobox));
		
	// Hide infobox when anywhere on map is clicked
	Microsoft.Maps.Events.addHandler(map, 'click', function displayInfobox(e)
	{
		this.setOptions({ visible:false });
	}.bind(pinInfobox));

	map.entities.push(pin);
	map.entities.push(pinInfobox);
}

function displayInfobox(e)
{
	if (e.targetType == "pushpin") {
		currentPinInfobox.setOptions({visible: false});
		currentPinInfobox = this;
		
		var pin = e.target;
		var html = "<span class='infobox_title'>" + pin.title + "</span><br/>" + getFriendProfileLinks(pin.description);
		
		this.setOptions({
			visible:!this.getVisible(),
			offset: new Microsoft.Maps.Point(-33,20),
			htmlContent: pushpinFrameHTML.replace('{content}',html)
		});

		//set location of infobox
		this.setLocation(pin.getLocation());
    }
}

function getFriendProfileLinks(userInfoList) {
	markupString = '';
	
	for (var i=0; i<userInfoList.length; i++) {
		userInfo = userInfoList[i];
		link = '<a href="http://www.facebook.com/' + userInfo.uid + '" target="_blank" ><img class="profile_pic" src="' + userInfo.pic + '" />' + userInfo.name + '</a><br/>';
		markupString += link;
	}
	
	return markupString;
}

function hideInfobox()
{
	this.setOptions({ visible: false });
}

function replaceWhiteSpace(str) {
	return str.replace(/\s/g,'').replace(/\,/g,''); 
}

function addMarkersForLocations(locations) {
	var addresses = [];
	for(address in locations){
		if(locations.hasOwnProperty(address)){
			addresses.push(address);
		}
	}
	
	$.ajax({
		    url: "/locations",
		    type: "POST",
		    data: {locations: JSON.stringify(addresses)},
		    success: function(resp){
				console.log('locations posted');
				if (resp) {
					for (var i=0; i<resp.length; i++) {
						loc = resp[i];
						addCoordsToLocation(locations, loc);
					}	
					addMarkersOnMapForLocations(locations);
				}
			}
		});
}

function addCoordsToLocation(locations, locationCoords) {
	city = locationCoords.address;
	if (locations[city] != null) {
		userInfoList = locations[city];

		var locationInfo = {};
		locationInfo.loc = locationCoords;
		locationInfo.userInfoList = userInfoList;
		locations[city] = locationInfo;
	}
}
