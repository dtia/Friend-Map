var geocoder;
var map;
var pinLayer;
var infoboxLayer;
var pushpinFrameHTML;
var currentPinInfobox;
var MAX_NUM_ANCHORS = 5;

function initialize()
{
    map = new Microsoft.Maps.Map(document.getElementById("mapDiv"), {
		credentials:"AkL7bdBJmEpRncJpZ9MmXwEUIvnkId7Yo9IJrDhNFGrkR--08hfritan5JH_nzRw",
		//center: new Microsoft.Maps.Location(37.7577,-122.4376),
		center: new Microsoft.Maps.Location(40.728,-73.9453),
		mapTypeId: Microsoft.Maps.MapTypeId.road,
		zoom: 6});
	geocoder = new google.maps.Geocoder();
		
	//Create two layers, one for pushpins, the other for the infobox. This way the infobox will always be above the pushpins.
	infoboxLayer = new Microsoft.Maps.EntityCollection();
	map.entities.push(infoboxLayer);
	
	pinLayer = new Microsoft.Maps.EntityCollection();
	map.entities.push(pinLayer);
	
	pushpinFrameHTML = '<div id="infobox" class="infobox"><div id="infobox_content" class="infobox_content">{content}</div></div><div class="infobox_pointer"><img src= <%= asset_path("pointer_shadow.png") %> /></div>';
}

function addMarkersOnMapForLocations(locations) {
	console.log('Adding markers...');
	
	map.setView({center: new Microsoft.Maps.Location('<%= Location.get_ip_coordinates()[:latitude] %>', '<%= Location.get_ip_coordinates()[:longitude] %>')})
	console.log('<%= Location.get_ip_coordinates() %>')
	setStatusCount(locations);
	
	for(address in locations){
		if(locations.hasOwnProperty(address)){
			locationInfo = locations[address];
 			userInfoList = locationInfo.userInfoList;
			addMarkersOnMap(locationInfo.loc, userInfoList);
		}
	}
}

function setStatusCount(locations) {
	cityCount = 0;
	peopleCount = 0;
	for(address in locations) {
		cityCount++;
		
		if(locations.hasOwnProperty(address)){
			locationInfo = locations[address];
 			userInfoList = locationInfo.userInfoList;
			
			if (typeof userInfoList !== "undefined")
				peopleCount += userInfoList.length;
		}
	}
	
	$("#statusMessage").html(peopleCount + ' friends in ' + cityCount + ' cities');
	
	return cityCount;
}

function addMarkersOnMap(location, userInfoList) {
	if(typeof location === 'undefined')
		return;

	var loc = new Microsoft.Maps.Location(location.latitude, location.longitude);
	var pin = new Microsoft.Maps.Pushpin(loc);
	pin.title = getTitle(location, userInfoList);
	pin.description = userInfoList;
	pinLayer.push(pin);
	
	// Create the infobox for the pushpin
    var pinInfobox = new Microsoft.Maps.Infobox(pin.getLocation(), {visible:false});
	infoboxLayer.push(pinInfobox);
	currentPinInfobox = pinInfobox;

	 // Add handler for the pushpin click event.
    Microsoft.Maps.Events.addHandler(pin, 'click', displayInfobox.bind(pinInfobox));

	// Hide infobox when anywhere on map is clicked
	Microsoft.Maps.Events.addHandler(map, 'click', function displayInfobox(e)
	{
		this.setOptions({ visible:false });
	}.bind(pinInfobox));
	
	map.entities.push(pin);
	map.entities.push(pinInfobox);
}

function getTitle(location, userInfoList) {
	address = location.address;

	if (userInfoList.length > MAX_NUM_ANCHORS) {
		address += ' (' + userInfoList.length + ')';
	}
	
	return address;
}

function getFriendProfileLinks(userInfoList) {
	markupString = '';
	
	for (var i=0; i<userInfoList.length; i++) {
		userInfo = userInfoList[i];
		link = '<a href="http://www.facebook.com/' + userInfo.uid + '" target="_blank" ><img class="profile_pic" src="' + userInfo.pic + '" />' + userInfo.name + '</a><br/>';
		markupString += link;
	}
	
	return markupString;
}

function replaceWhiteSpace(str) {
	return str.replace(/\s/g,'').replace(/\,/g,''); 
}

function addMarkersForLocations(locations) {
	var addresses = [];
	for(address in locations){
		if(locations.hasOwnProperty(address)){
			addresses.push(address);
		}
	}
	
	$.ajax({
		    url: "/locations",
		    type: "POST",
		    data: {locations: JSON.stringify(addresses)},
		    success: function(resp){
				console.log('Locations posted');
				if (resp) {
					for (var i=0; i<resp.length; i++) {
						loc = resp[i];
						addCoordsToLocation(locations, loc);
					}	
					addMarkersOnMapForLocations(locations);
				}
			}
		});
}

function addCoordsToLocation(locations, locationCoords) {
	city = locationCoords.address;
	if (locations[city] != null) {
		userInfoList = locations[city];

		var locationInfo = {};
		locationInfo.loc = locationCoords;
		locationInfo.userInfoList = userInfoList;
		locations[city] = locationInfo;
	}
}

function displayInfobox(e) {
	if (e.targetType == "pushpin") {
		
		currentPinInfobox.setOptions({visible: false});
		currentPinInfobox = this;
		
		var pin = e.target;
		var html = "<span class='infobox_title'>" + pin.title + "</span><br/>" + getFriendProfileLinks(pin.description);
		
		this.setOptions({
			visible:!this.getVisible(),
			offset: new Microsoft.Maps.Point(-33,20),
			htmlContent: pushpinFrameHTML.replace('{content}',html)
		});
		
        this.setLocation(e.target.getLocation());

		// TODO: need to make this more robust
		var numAnchors = document.getElementById('infobox_content').getElementsByTagName('a').length;
		if (numAnchors > MAX_NUM_ANCHORS) {
			$(document).ready(function(){			
				// Disable map Dragging when cursor enters infoBox div
				$("#infobox").on("mouseenter", function(){
					map.setOptions( {disableMouseInput: true} );
				})
				$("#infobox").on("mouseleave", function(){
					map.setOptions( {disableMouseInput: false} );
				});
			});	
		}

         //A buffer limit to use to specify the infobox must be away from the edges of the map.
         var buffer = 25;

         var infoboxOffset = currentPinInfobox.getOffset();
         var infoboxAnchor = currentPinInfobox.getAnchor();
         var infoboxLocation = map.tryLocationToPixel(e.target.getLocation(), Microsoft.Maps.PixelReference.control);

         var dx = infoboxLocation.x + infoboxOffset.x - infoboxAnchor.x;
         var dy = infoboxLocation.y - 25 - infoboxAnchor.y;

         if (dy < buffer) {    //Infobox overlaps with top of map.
             //Offset in opposite direction.
             dy *= -1;

             //add buffer from the top edge of the map.
             dy += buffer;
         } else {
             //If dy is greater than zero than it does not overlap.
             dy = 0;
         }

         if (dx < buffer) {    //Check to see if overlapping with left side of map.
             //Offset in opposite direction.
             dx *= -1;

             //add a buffer from the left edge of the map.
             dx += buffer;
         } else {              //Check to see if overlapping with right side of map.
             dx = map.getWidth() - infoboxLocation.x + infoboxAnchor.x - currentPinInfobox.getWidth();

             //If dx is greater than zero then it does not overlap.
             if (dx > buffer) {
                 dx = 0;
             } else {
                 //add a buffer from the right edge of the map.
                 dx -= buffer;
             }
         }

         //Adjust the map so infobox is in view
         if (dx != 0 || dy != 0) {
             map.setView({ centerOffset: new Microsoft.Maps.Point(dx, dy), center: map.getCenter() });
         }
     }
 }